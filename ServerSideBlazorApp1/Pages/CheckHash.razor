@using ServerSideBlazorApp1.Models;
@inject ServerSideBlazorApp1.Codes.ToDoDbHandler _toDoDBHandler;
@inject ServerSideBlazorApp1.Models.TodoDbContext _toDoContext;
@inject ServerSideBlazorApp1.Codes.EncryptionTest _encryptionTest;

@page "/CheckHash"

<h3>CheckHash</h3>
<hr />
@if (IsListValid)
{
    <div>
        <b style="font-size:x-large; color:green">PASSED</b>
    </div>
}
else
{
    <div>
        <b style="font-size:x-large; color:red">NOT PASSED</b>
    </div>
}

<div class="col-md-4" style="text-align: center; width: 100%;">
    Old List: <br>
    <div class="col-md-4" style="text-align: center; width: 100%;">
        @if (OldList != null)
        {
            @foreach (var todo in OldList)
            {
                <p>Item: @todo.ToDoItem <br> Description: @todo.ToDoDescription</p> <br /> <br />
            }
        }
    </div>
    <br>
    New List: <br>
    <div class="col-md-4" style="text-align: center; width: 100%;">
        @if (toDos != null)
        {
            @foreach (var todo in toDos)
            {
                <p>Item: @todo.ToDoItem <br> Description: @todo.ToDoDescription</p> <br /> <br />
            }
        }
    </div>
</div>

<div style="margin-top:10px">
    <a href="/todo">Tilbage</a>
</div>
@code {
    public static string? CurrentUser { get; set; }

    public static List<ToDo>? OldList { get; set; }

    public static bool SimulateAttack { get; set; }

    private bool IsListValid { get; set; }

    private List<ToDo>? toDos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if(OldList != null)
        {
            toDos = _toDoDBHandler.Read(CurrentUser, _toDoContext);

            if (SimulateAttack)
            {
                toDos.Add(new ToDo() { ToDoUser = CurrentUser, ToDoItem = _encryptionTest.Protect("angreb"), ToDoDescription = _encryptionTest.Protect("angreb") }); 
            }

            HashSet<int> hashSet1 = new HashSet<int>(OldList.Select(x => x.GetHashCode()));
            HashSet<int> hashSet2 = new HashSet<int>(toDos.Select(x => x.GetHashCode()));

            IsListValid = hashSet1.SetEquals(hashSet2);
        }
    }
}
